#define _CRT_SECURE_NO_WARNINGS
#define MAX_SIZE 100000
#include <stdio.h>
#include <stdlib.h>
/*
접근법
입력의 첫 줄에 입력되는 값은 수열의 최댓값이며 수열의 길이이다.
input 8 -> 1 2 3 4 5 6 7 8이 순서대로 스택에 저장되어 있다.
이를 둘째줄부터 입력받은 수열로 표현 될 수 있게 push(+) pop(-)으로 출력하고
만약 수열이 되지 않는다면 no를 출력하는 문제이다.
no 하나만 출력되다는 의미는 해당 문제의 연산을 진행하면서 + 와 -를 찍는 것이 아닌
배열로서 저장을 하고 출력한다는 의미로 해석하였다.
-> 이렇게 하면 수열로 연산이 불가능하면 배열을 출력하지 않고 no만 출력할 수 있다.
배열의 크기는 모든 원소가 + 모든 원소를 - 하려면 n의 2배의 사이즈를 가져야 한다.
*/
int o_idx = -1, s_top = -1, num = 1;
char operArr[MAX_SIZE * 2];
int stAck[MAX_SIZE];

void push() {
	operArr[++o_idx] = '+';
	stAck[++s_top] = num++;
}
void pop() {
	operArr[++o_idx] = '-';
	s_top--;
}
int peek() { return stAck[s_top]; }

int main() {
	int maxNum, eidx = 0, flag = 1;
	scanf("%d", &maxNum);
	int* enArr = (int*)malloc(sizeof(int) * maxNum);
	for (int i = 0; i < maxNum; i++) scanf("%d", &enArr[i]);
	for (int i = 0; i < maxNum; i++) {
		while (flag) {
			if (s_top == -1 || peek() < enArr[eidx]) { push(); }//(1)
			else if (peek() == enArr[eidx]) { pop(); eidx++; }	//(2)
			else if (s_top == 0 && peek() > maxNum) break;
			// (2)에 의해 모두 팝이 되었다면, top은 -1, num은 maxNum을 초과한 값이 된다.
			// 이 것은 예외이므로 예외처리를 하여 반복을 탈출하는 조건으로 사용한다.
			else {
				// peek() > enArr[eidx] 경우이다.
				// 이는 오름차순으로 스택에 정렬된 원소들로 수열을 만들 수 없음을 의미한다.
				flag = 0; printf("NO");
			}
		}
		if (!flag) break;
	}
	if (flag == 1) for (int i = 0; i < o_idx; i++) printf("%c\n", operArr[i]); 
	// flag가 살아있으므로 수열을 만들 수 있다는 의미이다.
	free(enArr);

	return 0;
}
